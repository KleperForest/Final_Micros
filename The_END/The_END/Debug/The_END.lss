
The_END.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007be  00000852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800102  00800102  00000854  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fb  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  00001c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a52  00000000  00000000  000025f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000516  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f7  00000000  00000000  000036ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
#include "ADC.h"

void initADC(){
	

	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 7f       	andi	r24, 0xF8	; 248
  ae:	80 83       	st	Z, r24
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  b0:	ae e7       	ldi	r26, 0x7E	; 126
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
  ba:	8c 91       	ld	r24, X
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC2D);     //desabilitar el A2 como digital
  c0:	8c 91       	ld	r24, X
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC3D);     //desabilitar el A3 como digital
  c6:	8c 91       	ld	r24, X
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	8c 93       	st	X, r24

	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  d8:	80 81       	ld	r24, Z
  da:	8f 77       	andi	r24, 0x7F	; 127
  dc:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  e8:	80 81       	ld	r24, Z
  ea:	87 60       	ori	r24, 0x07	; 7
  ec:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned int ucData)
{

	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  f6:	f9 99       	sbic	0x1f, 1	; 31
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  fa:	92 bd       	out	0x22, r25	; 34
  fc:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  fe:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 100:	8f b3       	in	r24, 0x1f	; 31
 102:	84 60       	ori	r24, 0x04	; 4
 104:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 106:	8f b3       	in	r24, 0x1f	; 31
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	8f bb       	out	0x1f, r24	; 31
 10c:	08 95       	ret

0000010e <EEPROM_read>:

unsigned int EEPROM_read(unsigned int uiAddress)
{

	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 10e:	f9 99       	sbic	0x1f, 1	; 31
 110:	fe cf       	rjmp	.-4      	; 0x10e <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
 112:	92 bd       	out	0x22, r25	; 34
 114:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 116:	8f b3       	in	r24, 0x1f	; 31
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	
	return EEDR;
 11c:	80 b5       	in	r24, 0x20	; 32
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret

00000122 <setup>:


void setup(void){
	
	
	DDRB |= (1 << PORTB2) | (1 << PORTB1) | (1 << PORTB3); // salida de servos
 122:	84 b1       	in	r24, 0x04	; 4
 124:	8e 60       	ori	r24, 0x0E	; 14
 126:	84 b9       	out	0x04, r24	; 4
	DDRC =0;  //Puerto C como entrada
 128:	17 b8       	out	0x07, r1	; 7
	DDRD |= (1 << DDD3 | (1 << DDD4) | (1 << DDD5) | (1 << DDD6));   //LEDS conectados a D4, D5, D6
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	88 67       	ori	r24, 0x78	; 120
 12e:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0b00001110;   //Activar entrada de pulsador en D8
 130:	84 b1       	in	r24, 0x04	; 4
 132:	8e 70       	andi	r24, 0x0E	; 14
 134:	84 b9       	out	0x04, r24	; 4
	PORTB = (1 << PORTB4) | (1 << PORTB0);  //Activar PULLUP 
 136:	81 e1       	ldi	r24, 0x11	; 17
 138:	85 b9       	out	0x05, r24	; 5
	
	initFastPWM1(8);  // timer1
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <initFastPWM1>
	channel(channelB, modo);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 de 02 	call	0x5bc	; 0x5bc <channel>
	channel(channelA, modo);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 de 02 	call	0x5bc	; 0x5bc <channel>
	topValue(29999);   // 1 a 2 ms servo
 152:	8f e2       	ldi	r24, 0x2F	; 47
 154:	95 e7       	ldi	r25, 0x75	; 117
 156:	0e 94 26 03 	call	0x64c	; 0x64c <topValue>
	initADC();   // ADC
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initFastPWM2();  // timer2
 15e:	0e 94 66 03 	call	0x6cc	; 0x6cc <initFastPWM2>
	PORTD |=  (1 << DDD5);
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8b b9       	out	0x0b, r24	; 11
	
    sei();   //Activar interrupciones
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <main>:
}


int main(void)
{
	setup();
 16c:	0e 94 91 00 	call	0x122	; 0x122 <setup>
	while (1)
	{ 
		
		if(PINC & (1 << PINC4))
 170:	34 9b       	sbis	0x06, 4	; 6
 172:	17 c0       	rjmp	.+46     	; 0x1a2 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9c e9       	ldi	r25, 0x9C	; 156
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xc>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x12>
 17e:	00 00       	nop
		{
			_delay_ms(10);
			modos ++;
 180:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <modos>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <modos>
			while (PINC & (1 << PINC4))   
 18a:	09 c0       	rjmp	.+18     	; 0x19e <main+0x32>
 18c:	9f ef       	ldi	r25, 0xFF	; 255
 18e:	26 e7       	ldi	r18, 0x76	; 118
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	91 50       	subi	r25, 0x01	; 1
 194:	20 40       	sbci	r18, 0x00	; 0
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x26>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x30>
 19c:	00 00       	nop
 19e:	34 99       	sbic	0x06, 4	; 6
 1a0:	f5 cf       	rjmp	.-22     	; 0x18c <main+0x20>
			{
				_delay_ms(30);    //antirrebote
			}
		}
			switch(modos){
 1a2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <modos>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	41 f0       	breq	.+16     	; 0x1ba <main+0x4e>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	51 f0       	breq	.+20     	; 0x1c2 <main+0x56>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <main+0x48>
 1b2:	47 c1       	rjmp	.+654    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				
				case 1:    //Modo manual
					
					DESADC = 0;
 1b4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <DESADC>
					break;
 1b8:	44 c1       	rjmp	.+648    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					
				case 2:    //Modo Adafruit
					PORTD |=  (1 << DDD4);
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8b b9       	out	0x0b, r24	; 11
					
					break;
 1c0:	40 c1       	rjmp	.+640    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					
				case 3:    //Modo EEPROM
					PORTD |=  (1 << DDD6);
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	8b b9       	out	0x0b, r24	; 11
					
					if ((PINB & (1 << PINB0)) == 0)    //Si se presiona el pulsador D8
 1c8:	18 99       	sbic	0x03, 0	; 3
 1ca:	1a c0       	rjmp	.+52     	; 0x200 <main+0x94>
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	29 ef       	ldi	r18, 0xF9	; 249
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	20 40       	sbci	r18, 0x00	; 0
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x66>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x70>
 1dc:	00 00       	nop
					{
						_delay_ms(20);
						CEEPROM ++;
 1de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <CEEPROM>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <CEEPROM>
						while ((PINB & (1 << PINB0)) == 0)
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <main+0x90>
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	26 e7       	ldi	r18, 0x76	; 118
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x84>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x8e>
 1fa:	00 00       	nop
 1fc:	18 9b       	sbis	0x03, 0	; 3
 1fe:	f5 cf       	rjmp	.-22     	; 0x1ea <main+0x7e>
						{
							_delay_ms(30);    //antirrebote
						}
					}
					
					if(PINC & (1 << PINC5)){
 200:	35 9b       	sbis	0x06, 5	; 6
 202:	1a c0       	rjmp	.+52     	; 0x238 <main+0xcc>
						mostrarEEPROM++;
 204:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mostrarEEPROM>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mostrarEEPROM>
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9c e9       	ldi	r25, 0x9C	; 156
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0xa6>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0xac>
 218:	00 00       	nop
						_delay_ms(10);
						DESADC = 1;  //desactivar ADC
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DESADC>
						
						while (PINC & (1 << PINC5))
 220:	09 c0       	rjmp	.+18     	; 0x234 <main+0xc8>
 222:	9f ef       	ldi	r25, 0xFF	; 255
 224:	26 e7       	ldi	r18, 0x76	; 118
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	91 50       	subi	r25, 0x01	; 1
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xbc>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0xc6>
 232:	00 00       	nop
 234:	35 99       	sbic	0x06, 5	; 6
 236:	f5 cf       	rjmp	.-22     	; 0x222 <main+0xb6>
							_delay_ms(30);    //antirrebote
						}
					}
						
						//Verificar que valor tiene la posicion actual y almacenar los valores
						if (CEEPROM == 1)
 238:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <CEEPROM>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	e9 f4       	brne	.+58     	; 0x27a <main+0x10e>
						{
							EEPROM_write(0,servo1);          //Almacenar cada valor de cada servomotor
 240:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servo1>
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(1,servo2);
 24e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <servo2>
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(2,servo3);
 25c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <servo3>
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(3,servo4);
 26a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <servo4>
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
 278:	5e c0       	rjmp	.+188    	; 0x336 <main+0x1ca>
						}
						
						else if (CEEPROM == 2)
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	e9 f4       	brne	.+58     	; 0x2b8 <main+0x14c>
						{
							EEPROM_write(4,servo1);
 27e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servo1>
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(5,servo2);
 28c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <servo2>
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(6,servo3);
 29a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <servo3>
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(7,servo4);
 2a8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <servo4>
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
 2b6:	3f c0       	rjmp	.+126    	; 0x336 <main+0x1ca>
							
						}
						
						else if (CEEPROM == 3)
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	e9 f4       	brne	.+58     	; 0x2f6 <main+0x18a>
						{
							EEPROM_write(8,servo1);
 2bc:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servo1>
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	88 e0       	ldi	r24, 0x08	; 8
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(9,servo2);
 2ca:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <servo2>
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	89 e0       	ldi	r24, 0x09	; 9
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(10,servo3);
 2d8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <servo3>
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
							EEPROM_write(11,servo4);
 2e6:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <servo4>
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	8b e0       	ldi	r24, 0x0B	; 11
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
 2f4:	20 c0       	rjmp	.+64     	; 0x336 <main+0x1ca>
							
						}
						
					else if (CEEPROM == 4)
 2f6:	84 30       	cpi	r24, 0x04	; 4
 2f8:	f1 f4       	brne	.+60     	; 0x336 <main+0x1ca>
					{
						CEEPROM = 0;
 2fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <CEEPROM>
						EEPROM_write(12,servo1);
 2fe:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <servo1>
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
						EEPROM_write(13,servo2);
 30c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <servo2>
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
						EEPROM_write(14,servo3);
 31a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <servo3>
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	8e e0       	ldi	r24, 0x0E	; 14
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
						EEPROM_write(15,servo4);
 328:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <servo4>
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 7b 00 	call	0xf6	; 0xf6 <EEPROM_write>
						
					}
					
					
					
					if (mostrarEEPROM == 1)
 336:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mostrarEEPROM>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	e1 f4       	brne	.+56     	; 0x376 <main+0x20a>
					{
					
						int  dato = EEPROM_read(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2A);  
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
						
						dato = EEPROM_read(1);  
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelA);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(2);  
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelB);
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(3);  
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2B);
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
					
					}
					
					if (mostrarEEPROM == 2)
 376:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mostrarEEPROM>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	e1 f4       	brne	.+56     	; 0x3b6 <main+0x24a>
					{
						
						int  dato = EEPROM_read(4);
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2A);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
						
						dato = EEPROM_read(5);
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelA);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(6);
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelB);
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(7);
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2B);
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
						
					}
					
					if (mostrarEEPROM == 3)
 3b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mostrarEEPROM>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	e1 f4       	brne	.+56     	; 0x3f6 <main+0x28a>
					{
						
						int  dato = EEPROM_read(8);
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2A);
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
						
						dato = EEPROM_read(9);
 3cc:	89 e0       	ldi	r24, 0x09	; 9
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelA);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(10);
 3da:	8a e0       	ldi	r24, 0x0A	; 10
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelB);
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(11);
 3e8:	8b e0       	ldi	r24, 0x0B	; 11
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2B);
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
						
					}
					
					if (mostrarEEPROM == 4)
 3f6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mostrarEEPROM>
 3fa:	84 30       	cpi	r24, 0x04	; 4
 3fc:	e1 f4       	brne	.+56     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
					{
						
						int  dato = EEPROM_read(12);
 3fe:	8c e0       	ldi	r24, 0x0C	; 12
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2A);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
						
						dato = EEPROM_read(13);
 40c:	8d e0       	ldi	r24, 0x0D	; 13
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelA);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(14);
 41a:	8e e0       	ldi	r24, 0x0E	; 14
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert1(dato, channelB);
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
						
						dato = EEPROM_read(15);
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 87 00 	call	0x10e	; 0x10e <EEPROM_read>
						convert2(dato, channel2B);
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
					}
					
					
					if (mostrarEEPROM == 5)
 436:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mostrarEEPROM>
 43a:	85 30       	cpi	r24, 0x05	; 5
 43c:	11 f4       	brne	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
					{
						mostrarEEPROM = 0;
 43e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mostrarEEPROM>
					

					break;
			}
			
			if (modos == 4)
 442:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <modos>
 446:	84 30       	cpi	r24, 0x04	; 4
 448:	29 f4       	brne	.+10     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			{
				PORTD &=(1 << DDD5) ;
 44a:	8b b1       	in	r24, 0x0b	; 11
 44c:	80 72       	andi	r24, 0x20	; 32
 44e:	8b b9       	out	0x0b, r24	; 11
				modos = 0;
 450:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <modos>
			}
			
		
		
	if (DESADC == 0)
 454:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DESADC>
 458:	81 11       	cpse	r24, r1
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	{
	
	ADCSRA |= (1 << ADSC);   //Leer ADC
 45c:	ea e7       	ldi	r30, 0x7A	; 122
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	80 64       	ori	r24, 0x40	; 64
 464:	80 83       	st	Z, r24
 466:	9f ef       	ldi	r25, 0xFF	; 255
 468:	29 ef       	ldi	r18, 0xF9	; 249
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	91 50       	subi	r25, 0x01	; 1
 46e:	20 40       	sbci	r18, 0x00	; 0
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
 478:	7b ce       	rjmp	.-778    	; 0x170 <main+0x4>

0000047a <__vector_21>:
	}
}



ISR (ADC_vect){
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	if (DESADC == 0)
 4a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DESADC>
 4a4:	81 11       	cpse	r24, r1
 4a6:	63 c0       	rjmp	.+198    	; 0x56e <__vector_21+0xf4>
	{
		switch (ADCS){
 4a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ADCS>
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	d1 f0       	breq	.+52     	; 0x4e4 <__vector_21+0x6a>
 4b0:	30 f0       	brcs	.+12     	; 0x4be <__vector_21+0x44>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	69 f1       	breq	.+90     	; 0x510 <__vector_21+0x96>
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__vector_21+0x42>
 4ba:	40 c0       	rjmp	.+128    	; 0x53c <__vector_21+0xc2>
 4bc:	53 c0       	rjmp	.+166    	; 0x564 <__vector_21+0xea>
			case 0:
				ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC0
 4be:	ec e7       	ldi	r30, 0x7C	; 124
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	88 7f       	andi	r24, 0xF8	; 248
 4c6:	80 83       	st	Z, r24
				ADCS = 1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADCS>
				convert1(ADCH, channelB);   //enviar se?al a canal B de timer1
 4ce:	c9 e7       	ldi	r28, 0x79	; 121
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
 4d2:	88 81       	ld	r24, Y
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
				servo1 = ADCH;
 4dc:	88 81       	ld	r24, Y
 4de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <servo1>
				break;
 4e2:	40 c0       	rjmp	.+128    	; 0x564 <__vector_21+0xea>
				
			case 1:
				ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC1
 4e4:	ec e7       	ldi	r30, 0x7C	; 124
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	88 7f       	andi	r24, 0xF8	; 248
 4ec:	80 83       	st	Z, r24
				ADMUX |= (1<<MUX0);
 4ee:	80 81       	ld	r24, Z
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	80 83       	st	Z, r24
				ADCS = 2; 
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADCS>
				convert1(ADCH, channelA);       //enviar se?al a canal A de timer1
 4fa:	c9 e7       	ldi	r28, 0x79	; 121
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
 4fe:	88 81       	ld	r24, Y
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 37 03 	call	0x66e	; 0x66e <convert1>
				servo2 = ADCH;
 508:	88 81       	ld	r24, Y
 50a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <servo2>
				break;
 50e:	2a c0       	rjmp	.+84     	; 0x564 <__vector_21+0xea>
			
			case 2:
				ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 510:	ec e7       	ldi	r30, 0x7C	; 124
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	88 7f       	andi	r24, 0xF8	; 248
 518:	80 83       	st	Z, r24
				ADMUX|=(1<<MUX1);
 51a:	80 81       	ld	r24, Z
 51c:	82 60       	ori	r24, 0x02	; 2
 51e:	80 83       	st	Z, r24
				ADCS = 3; 
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADCS>
				convert2(ADCH, channel2A);
 526:	c9 e7       	ldi	r28, 0x79	; 121
 528:	d0 e0       	ldi	r29, 0x00	; 0
 52a:	88 81       	ld	r24, Y
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
				servo3 = ADCH;
 534:	88 81       	ld	r24, Y
 536:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <servo3>
				break;
 53a:	14 c0       	rjmp	.+40     	; 0x564 <__vector_21+0xea>
			
			case 3:
				ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 53c:	ec e7       	ldi	r30, 0x7C	; 124
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	88 7f       	andi	r24, 0xF8	; 248
 544:	80 83       	st	Z, r24
				ADMUX|=(1<<MUX0)|(1<<MUX1);
 546:	80 81       	ld	r24, Z
 548:	83 60       	ori	r24, 0x03	; 3
 54a:	80 83       	st	Z, r24
				ADCS = 0;
 54c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ADCS>
				convert2(ADCH, channel2B);
 550:	c9 e7       	ldi	r28, 0x79	; 121
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	88 81       	ld	r24, Y
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 80 03 	call	0x700	; 0x700 <convert2>
				servo4 = ADCH;
 55e:	88 81       	ld	r24, Y
 560:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <servo4>
				break;
		
		}
		
	ADCSRA |= (1 << ADIF);	
 564:	ea e7       	ldi	r30, 0x7A	; 122
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	80 61       	ori	r24, 0x10	; 16
 56c:	80 83       	st	Z, r24
}
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <__vector_18>:


ISR(USART_RX_vect)
{
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	8f 93       	push	r24
	receivedChar = UDR0;
 5a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>

	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 5a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5ac:	85 ff       	sbrs	r24, 5
 5ae:	fc cf       	rjmp	.-8      	; 0x5a8 <__vector_18+0x14>
	
}
 5b0:	8f 91       	pop	r24
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <channel>:
uint16_t topVal = 1;
uint16_t i, j;


void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	19 f0       	breq	.+6      	; 0x5c6 <channel+0xa>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	79 f0       	breq	.+30     	; 0x5e2 <channel+0x26>
 5c4:	08 95       	ret
		case 1:
		if(inverted == 1){
 5c6:	61 30       	cpi	r22, 0x01	; 1
 5c8:	31 f4       	brne	.+12     	; 0x5d6 <channel+0x1a>
			TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//A invertido
 5ca:	e0 e8       	ldi	r30, 0x80	; 128
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	80 6c       	ori	r24, 0xC0	; 192
 5d2:	80 83       	st	Z, r24
 5d4:	08 95       	ret
			}else{
			TCCR1A |= (1 << COM1A1);					//A no invertido
 5d6:	e0 e8       	ldi	r30, 0x80	; 128
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	80 68       	ori	r24, 0x80	; 128
 5de:	80 83       	st	Z, r24
 5e0:	08 95       	ret
		}
		break;
		
		case 2:
		if(inverted == 1){
 5e2:	61 30       	cpi	r22, 0x01	; 1
 5e4:	31 f4       	brne	.+12     	; 0x5f2 <channel+0x36>
			TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//B invertido
 5e6:	e0 e8       	ldi	r30, 0x80	; 128
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	80 63       	ori	r24, 0x30	; 48
 5ee:	80 83       	st	Z, r24
 5f0:	08 95       	ret
			}else{
			TCCR1A |= (1 << COM1B1);					//B no invertido
 5f2:	e0 e8       	ldi	r30, 0x80	; 128
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	80 62       	ori	r24, 0x20	; 32
 5fa:	80 83       	st	Z, r24
 5fc:	08 95       	ret

000005fe <initFastPWM1>:
}


void initFastPWM1(uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;
 5fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 602:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 606:	88 30       	cpi	r24, 0x08	; 8
 608:	91 05       	cpc	r25, r1
 60a:	21 f0       	breq	.+8      	; 0x614 <initFastPWM1+0x16>
 60c:	81 15       	cp	r24, r1
 60e:	94 40       	sbci	r25, 0x04	; 4
 610:	39 f0       	breq	.+14     	; 0x620 <initFastPWM1+0x22>
 612:	0b c0       	rjmp	.+22     	; 0x62a <initFastPWM1+0x2c>
	{
		case 8:
		TCCR1B |= (1 << CS11);					//prescaler 8
 614:	e1 e8       	ldi	r30, 0x81	; 129
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	82 60       	ori	r24, 0x02	; 2
 61c:	80 83       	st	Z, r24
		break;
 61e:	05 c0       	rjmp	.+10     	; 0x62a <initFastPWM1+0x2c>
		
		case 1024:
		TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 620:	e1 e8       	ldi	r30, 0x81	; 129
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	85 60       	ori	r24, 0x05	; 5
 628:	80 83       	st	Z, r24
		break;
	}
	
	
	TCCR1A |= (1 << WGM11);
 62a:	e0 e8       	ldi	r30, 0x80	; 128
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	82 60       	ori	r24, 0x02	; 2
 632:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 634:	e1 e8       	ldi	r30, 0x81	; 129
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	88 61       	ori	r24, 0x18	; 24
 63c:	80 83       	st	Z, r24
	topVal = 1;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 646:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 64a:	08 95       	ret

0000064c <topValue>:
	
}


void topValue(uint16_t top){
	if (topVal == 1)	{
 64c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 650:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 654:	21 30       	cpi	r18, 0x01	; 1
 656:	31 05       	cpc	r19, r1
 658:	29 f4       	brne	.+10     	; 0x664 <topValue+0x18>
		ICR1 = top;		//Poner el valor maximo de llegada en ICR1
 65a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 65e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 662:	08 95       	ret
	}
	else{
		topVal = 0;
 664:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 668:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 66c:	08 95       	ret

0000066e <convert1>:
}


void convert1(uint16_t analogIn, uint8_t selChannel){   //Conversion para servos
	
	switch(selChannel){
 66e:	61 30       	cpi	r22, 0x01	; 1
 670:	19 f0       	breq	.+6      	; 0x678 <convert1+0xa>
 672:	62 30       	cpi	r22, 0x02	; 2
 674:	b1 f0       	breq	.+44     	; 0x6a2 <convert1+0x34>
 676:	08 95       	ret
		case 1:
		i = analogIn;
 678:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <i+0x1>
 67c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <i>
		j = (200/12)*i+1000;
 680:	82 95       	swap	r24
 682:	92 95       	swap	r25
 684:	90 7f       	andi	r25, 0xF0	; 240
 686:	98 27       	eor	r25, r24
 688:	80 7f       	andi	r24, 0xF0	; 240
 68a:	98 27       	eor	r25, r24
 68c:	88 51       	subi	r24, 0x18	; 24
 68e:	9c 4f       	sbci	r25, 0xFC	; 252
 690:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <j+0x1>
 694:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <j>
		OCR1A = j;
 698:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 69c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 6a0:	08 95       	ret
		
		case 2:
		i = analogIn;
 6a2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <i+0x1>
 6a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <i>
		j = (200/12)*i+1000;
 6aa:	82 95       	swap	r24
 6ac:	92 95       	swap	r25
 6ae:	90 7f       	andi	r25, 0xF0	; 240
 6b0:	98 27       	eor	r25, r24
 6b2:	80 7f       	andi	r24, 0xF0	; 240
 6b4:	98 27       	eor	r25, r24
 6b6:	88 51       	subi	r24, 0x18	; 24
 6b8:	9c 4f       	sbci	r25, 0xFC	; 252
 6ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <j+0x1>
 6be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <j>
		OCR1B = j;
 6c2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 6ca:	08 95       	ret

000006cc <initFastPWM2>:

int P, a;
uint8_t suma = 0;

void initFastPWM2(){
	TCCR2A = 0;
 6cc:	e0 eb       	ldi	r30, 0xB0	; 176
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	10 82       	st	Z, r1
	TCCR2B = 0;
 6d2:	a1 eb       	ldi	r26, 0xB1	; 177
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	1c 92       	st	X, r1
	
	TCCR2A |= (1<<COM2A1);	//  OC2A NO INVERTIDO
 6d8:	80 81       	ld	r24, Z
 6da:	80 68       	ori	r24, 0x80	; 128
 6dc:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);	//  OC2A NO INVERTIDO
 6de:	80 81       	ld	r24, Z
 6e0:	80 62       	ori	r24, 0x20	; 32
 6e2:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<WGM22);	//Fast mode
 6e4:	80 81       	ld	r24, Z
 6e6:	8b 60       	ori	r24, 0x0B	; 11
 6e8:	80 83       	st	Z, r24
	TCCR2B &= ~(1<<WGM22);
 6ea:	8c 91       	ld	r24, X
 6ec:	87 7f       	andi	r24, 0xF7	; 247
 6ee:	8c 93       	st	X, r24
	
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);//Prescaler 1024
 6f0:	8c 91       	ld	r24, X
 6f2:	87 60       	ori	r24, 0x07	; 7
 6f4:	8c 93       	st	X, r24
	OCR2A = 7;
 6f6:	87 e0       	ldi	r24, 0x07	; 7
 6f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR0B = 0;
 6fc:	18 bc       	out	0x28, r1	; 40
 6fe:	08 95       	ret

00000700 <convert2>:
}


void convert2(uint16_t analogIn2, uint8_t selChannel2){   //Conversion para servos
	
	switch(selChannel2){
 700:	61 30       	cpi	r22, 0x01	; 1
 702:	19 f0       	breq	.+6      	; 0x70a <convert2+0xa>
 704:	62 30       	cpi	r22, 0x02	; 2
 706:	c9 f0       	breq	.+50     	; 0x73a <convert2+0x3a>
 708:	08 95       	ret
		case 1:
		P = analogIn2;
 70a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <P+0x1>
 70e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <P>
		
		a = (((P)*(28-7))/(255))+7;     //Recreando la funcion de arduino de map(ADCH,0,255,7,38)
 712:	45 e1       	ldi	r20, 0x15	; 21
 714:	48 9f       	mul	r20, r24
 716:	90 01       	movw	r18, r0
 718:	49 9f       	mul	r20, r25
 71a:	30 0d       	add	r19, r0
 71c:	11 24       	eor	r1, r1
 71e:	c9 01       	movw	r24, r18
 720:	6f ef       	ldi	r22, 0xFF	; 255
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
 728:	69 5f       	subi	r22, 0xF9	; 249
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <a+0x1>
 730:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <a>
		OCR2A = a;
 734:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		
		break;
 738:	08 95       	ret
		
		case 2:
		P = analogIn2;
 73a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <P+0x1>
 73e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <P>
		a = (((P)*(38-7))/(255))+7;
 742:	4f e1       	ldi	r20, 0x1F	; 31
 744:	48 9f       	mul	r20, r24
 746:	90 01       	movw	r18, r0
 748:	49 9f       	mul	r20, r25
 74a:	30 0d       	add	r19, r0
 74c:	11 24       	eor	r1, r1
 74e:	c9 01       	movw	r24, r18
 750:	6f ef       	ldi	r22, 0xFF	; 255
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
 758:	69 5f       	subi	r22, 0xF9	; 249
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <a+0x1>
 760:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <a>
		OCR2B = a;
 764:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 768:	08 95       	ret

0000076a <__divmodhi4>:
 76a:	97 fb       	bst	r25, 7
 76c:	07 2e       	mov	r0, r23
 76e:	16 f4       	brtc	.+4      	; 0x774 <__divmodhi4+0xa>
 770:	00 94       	com	r0
 772:	07 d0       	rcall	.+14     	; 0x782 <__divmodhi4_neg1>
 774:	77 fd       	sbrc	r23, 7
 776:	09 d0       	rcall	.+18     	; 0x78a <__divmodhi4_neg2>
 778:	0e 94 c9 03 	call	0x792	; 0x792 <__udivmodhi4>
 77c:	07 fc       	sbrc	r0, 7
 77e:	05 d0       	rcall	.+10     	; 0x78a <__divmodhi4_neg2>
 780:	3e f4       	brtc	.+14     	; 0x790 <__divmodhi4_exit>

00000782 <__divmodhi4_neg1>:
 782:	90 95       	com	r25
 784:	81 95       	neg	r24
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	08 95       	ret

0000078a <__divmodhi4_neg2>:
 78a:	70 95       	com	r23
 78c:	61 95       	neg	r22
 78e:	7f 4f       	sbci	r23, 0xFF	; 255

00000790 <__divmodhi4_exit>:
 790:	08 95       	ret

00000792 <__udivmodhi4>:
 792:	aa 1b       	sub	r26, r26
 794:	bb 1b       	sub	r27, r27
 796:	51 e1       	ldi	r21, 0x11	; 17
 798:	07 c0       	rjmp	.+14     	; 0x7a8 <__udivmodhi4_ep>

0000079a <__udivmodhi4_loop>:
 79a:	aa 1f       	adc	r26, r26
 79c:	bb 1f       	adc	r27, r27
 79e:	a6 17       	cp	r26, r22
 7a0:	b7 07       	cpc	r27, r23
 7a2:	10 f0       	brcs	.+4      	; 0x7a8 <__udivmodhi4_ep>
 7a4:	a6 1b       	sub	r26, r22
 7a6:	b7 0b       	sbc	r27, r23

000007a8 <__udivmodhi4_ep>:
 7a8:	88 1f       	adc	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	5a 95       	dec	r21
 7ae:	a9 f7       	brne	.-22     	; 0x79a <__udivmodhi4_loop>
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	bc 01       	movw	r22, r24
 7b6:	cd 01       	movw	r24, r26
 7b8:	08 95       	ret

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
